{\rtf1\ansi\ansicpg1251\cocoartf2709
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica-Bold;\f1\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs24 \cf0 \uc0\u1051 \u1072 \u1073  4\
\uc0\u1047 \u1072 \u1076 \u1072 \u1095 \u1072  1 \u1057 ++
\f1\b0 \
\
#include <iostream>\
#include <vector>\
using namespace std;\
// \uc0\u1084 \u1077 \u1090 \u1086 \u1076 \u1072  \u1043 \u1072 \u1091 \u1089 \u1089 \u1072 \
void forwardElimination(vector<vector<double>>& mat) \{\
    int n = mat.size();\
\
    for (int k = 0; k < n; ++k) \{\
        for (int i = k + 1; i < n; ++i) \{\
            double factor = mat[i][k] / mat[k][k];\
            for (int j = k; j < n + 1; ++j) \{\
                mat[i][j] -= factor * mat[k][j];\
            \}\
        \}\
    \}\
\}\
\
// \uc0\u1054 \u1073 \u1088 \u1072 \u1090 \u1085 \u1099 \u1081  \u1093 \u1086 \u1076  \u1084 \u1077 \u1090 \u1086 \u1076 \u1072  \u1043 \u1072 \u1091 \u1089 \u1089 \u1072 \
vector<double> backSubstitution(const std::vector<vector<double>>& mat) \{\
    int n = mat.size();\
    vector<double> x(n);\
\
    for (int i = n - 1; i >= 0; --i) \{\
        x[i] = mat[i][n];\
        for (int j = i + 1; j < n; ++j) \{\
            x[i] -= mat[i][j] * x[j];\
        \}\
        x[i] /= mat[i][i];\
    \}\
\
    return x;\
\}\
\
int main() \{\
    vector<std::vector<double>> coefficients = \{\
        \{-7, -9, 1, -9, 29\},\
        \{-6, -8, -5, 2, 42\},\
        \{-3, 6, 5, -9, 11\},\
        \{-2, 0, -5, -9, 75\}\
    \};\
\
    forwardElimination(coefficients);\
    vector<double> solution = backSubstitution(coefficients);\
\
    cout << "\uc0\u1056 \u1077 \u1096 \u1077 \u1085 \u1080 \u1077 : ";\
    for (double val : solution) \{\
        cout << val << " ";\
    \}\
    cout << endl;\
\
    return 0;\
\}\

\f0\b \
\uc0\u1047 \u1072 \u1076 \u1072 \u1095 \u1072  2 \u1087 \u1080 \u1090 \u1086 \u1085 
\f1\b0 \
\
import numpy as np\
\
def solve_cramers_rule(A, b):\
    n = len(A)\
    x = np.zeros(n)\
\
    for i in range(n):\
        det_A = np.linalg.det(A)\
        det_Ai = np.linalg.det(np.delete(np.delete(A, i, 0), i, 1))\
        x[i] = det_Ai / det_A\
\
    return x\
\
def solve_jacobi_method(A, b, tol=1e-8):\
    n = len(A)\
    x = np.zeros(n)\
\
    while True:\
        x_prev = x.copy()\
        for i in range(n):\
            s = 0\
            for j in range(n):\
                if i != j:\
                    s += A[i, j] * x[j]\
            x[i] = (b[i] - s) / A[i, i]\
\
        if np.allclose(x, x_prev, atol=tol):\
            break\
\
    return x\
\
A = np.array([[-10, -1, 3], [8, 7, 2], [6, 6, 2]])\
\
\
b = np.array([-1, 0, 2])\
\
x_cramer = solve_cramers_rule(A, b)\
\
print("\uc0\u1056 \u1077 \u1096 \u1077 \u1085 \u1080 \u1077  \u1089  \u1080 \u1089 \u1087 \u1086 \u1083 \u1100 \u1079 \u1086 \u1074 \u1072 \u1085 \u1080 \u1077 \u1084  \u1087 \u1088 \u1072 \u1074 \u1080 \u1083 \u1072  \u1050 \u1088 \u1072 \u1084 \u1077 \u1088 \u1072 :", x_cramer)\
\
x_jacobi = solve_jacobi_method(A, b)\
\
print("\uc0\u1056 \u1077 \u1096 \u1077 \u1085 \u1080 \u1077  \u1089  \u1080 \u1089 \u1087 \u1086 \u1083 \u1100 \u1079 \u1086 \u1074 \u1072 \u1085 \u1080 \u1077 \u1084  \u1084 \u1077 \u1090 \u1086 \u1076 \u1072  \u1071 \u1082 \u1086 \u1073 \u1080 :", x_jacobi)\
\

\f0\b \uc0\u1047 \u1072 \u1076 \u1072 \u1095 \u1072  3 \u1087 \u1080 \u1090 \u1086 \u1085 \
\

\f1\b0 import numpy as np\
\
def seidel(A, b, tol=0.01):\
    n = len(A)\
    x = np.zeros(n)\
\
    while True:\
        x_prev = x.copy()\
        for i in range(n):\
            sum_ = 0\
            for j in range(n):\
                if i != j:\
                    sum_ += A[i, j] * x_prev[j]\
            x[i] = (b[i] - sum_) / A[i, i]\
\
        if np.allclose(x, x_prev, atol=tol):\
            break\
\
    return x\
\
A = np.array([[12, -3, -1, 3], [5, 20, 9, 1], [6, -3, -21, -7], [8, -7, 3, -27]])\
\
b = np.array([-31, -90, 119, 71])\
\
x_seidel = seidel(A, b)\
\
print("\uc0\u1056 \u1077 \u1096 \u1077 \u1085 \u1080 \u1077  \u1089  \u1080 \u1089 \u1087 \u1086 \u1083 \u1100 \u1079 \u1086 \u1074 \u1072 \u1085 \u1080 \u1077 \u1084  \u1084 \u1077 \u1090 \u1086 \u1076 \u1072  \u1047 \u1072 \u1081 \u1076 \u1077 \u1083 \u1103 :", x_seidel)\
\

\f0\b \uc0\u1047 \u1072 \u1076 \u1072 \u1095 \u1072  4 \u1057 ++
\f1\b0 \
\
#include <iostream>\
#include <vector>\
using namespace std;\
\
vector<double> thomasAlgorithm(vector<vector<double>>& A,vector<double>& b) \{\
    int n = b.size();\
    vector<double> c(n-1), d(n);\
\
    c[0] = A[0][1] / A[0][0];\
    d[0] = b[0] / A[0][0];\
    for (int i = 1; i < n - 1; ++i) \{\
        double m = 1.0 / (A[i][i] - A[i][i-1] * c[i-1]);\
        c[i] = A[i][i+1] * m;\
        d[i] = (b[i] - A[i][i-1] * d[i-1]) * m;\
    \}\
\
    d[n-1] = (b[n-1] - A[n-1][n-2] * d[n-2]) / (A[n-1][n-1]);\
    vector<double> x(n);\
    x[n-1] = d[n-1];\
    for (int i = n - 2; i >= 0; --i) \{\
        x[i] = d[i] - c[i] * x[i+1];\
    \}\
\
    return x;\
\}\
\
int main() \{\
    vector<vector<double>> A = \{\
        \{8, 0, 0, -4, 0\},\
        \{-2, 12, -7, 0, 0\},\
        \{0, 2, -9, 1, 0\},\
        \{0, 0, 8, 17, -4\},\
        \{0, 0, 0, -7, 13\}\
    \};\
\
    vector<double> b = \{32, 15, -10, 133, -76\};\
\
    vector<double> solution = thomasAlgorithm(A, b);\
\
    cout << "\uc0\u1056 \u1077 \u1096 \u1077 \u1085 \u1080 \u1077 : ";\
    for (double val : solution) \{\
        cout << val << " ";\
    \}\
    cout << endl;\
\
    return 0;\
\}}